{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4ad6fb79",
   "metadata": {},
   "outputs": [],
   "source": [
    "# This command allows tkinter in Jupyter (It is optional but I noticed if I use this the gui opens quickly)\n",
    "%gui tk\n",
    "\n",
    "#imports\n",
    "import tkinter as tk\n",
    "from tkinter import scrolledtext, simpledialog, messagebox\n",
    "import json"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8e325420",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Note:\n",
    "    current_id = 0  # Class variable to keep track of the last used ID\n",
    "\n",
    "    def __init__(self, title, text, tags=None, link=None, snippet=None):\n",
    "        self.id = Note.current_id + 1\n",
    "        Note.current_id = self.id\n",
    "        self.title = title\n",
    "        self.text = text\n",
    "        self.tags = tags if tags else []\n",
    "        self.link = link\n",
    "        self.snippet = snippet\n",
    "\n",
    "    def format_as_text(self):\n",
    "        # I format the note into a text string that looks nice when saved to a TXT file, now including the note ID.\n",
    "        return f\"Note: {self.id}\\nTitle: {self.title}\\nText: {self.text}\\n\\nTags: {', '.join(self.tags)}\\nLink: {self.link}\\nSnippet:\\n{self.snippet}\\n\\n\\n\\n\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1d2385cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "class NoteApp(tk.Tk):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.title(\"Note Application\")\n",
    "        self.geometry(\"600x400\")  # Larger window with improved layout\n",
    "\n",
    "        # UI Elements\n",
    "        self.note_id_label = tk.Label(self, text=f\"Note ID: {Note.current_id + 1}\")\n",
    "        self.note_id_label.pack(pady=(10,0))\n",
    "\n",
    "        tk.Label(self, text=\"Title:\").pack(pady=(10,0))\n",
    "        self.title_entry = tk.Entry(self, width=50)\n",
    "        self.title_entry.pack()\n",
    "\n",
    "        tk.Label(self, text=\"Text:\").pack(pady=(10,0))\n",
    "        self.text_area = scrolledtext.ScrolledText(self, width=40, height=5)\n",
    "        self.text_area.pack()\n",
    "\n",
    "        tk.Label(self, text=\"Tags (comma-separated):\").pack(pady=(10,0))\n",
    "        self.tags_entry = tk.Entry(self, width=50)\n",
    "        self.tags_entry.pack()\n",
    "\n",
    "        tk.Label(self, text=\"Link:\").pack(pady=(10,0))\n",
    "        self.link_entry = tk.Entry(self, width=50)\n",
    "        self.link_entry.pack()\n",
    "\n",
    "        tk.Label(self, text=\"Snippet (code):\").pack(pady=(10,0))\n",
    "        self.snippet_text = scrolledtext.ScrolledText(self, width=40, height=3)\n",
    "        self.snippet_text.pack()\n",
    "\n",
    "        self.save_button = tk.Button(self, text=\"Save Note\", command=self.save_note)\n",
    "        self.save_button.pack(pady=5)\n",
    "\n",
    "        self.export_txt_button = tk.Button(self, text=\"Export Notes to TXT\", command=self.export_notes_to_txt)\n",
    "        self.export_txt_button.pack(pady=5)\n",
    "\n",
    "        self.export_json_button = tk.Button(self, text=\"Export Notes to JSON\", command=self.export_notes_to_json)\n",
    "        self.export_json_button.pack(pady=5)\n",
    "\n",
    "        self.notes = []\n",
    "\n",
    "    def save_note(self):\n",
    "        # Gather all note data and create a new note object\n",
    "        title = self.title_entry.get()\n",
    "        text = self.text_area.get(\"1.0\", tk.END).strip()\n",
    "        tags = self.tags_entry.get().split(',') if self.tags_entry.get() else []\n",
    "        link = self.link_entry.get()\n",
    "        snippet = self.snippet_text.get(\"1.0\", tk.END).strip()\n",
    "        note = Note(title, text, tags, link, snippet)\n",
    "        self.notes.append(note)\n",
    "        self.note_id_label.config(text=f\"Next Note ID: {Note.current_id + 1}\")  # Update the ID label\n",
    "        messagebox.showinfo(\"Success\", \"Note saved successfully!\")\n",
    "        self.clear_entries()\n",
    "\n",
    "    def clear_entries(self):\n",
    "        # Clear all input fields to be ready for a new note\n",
    "        self.title_entry.delete(0, tk.END)\n",
    "        self.text_area.delete(\"1.0\", tk.END)\n",
    "        self.tags_entry.delete(0, tk.END)\n",
    "        self.link_entry.delete(0, tk.END)\n",
    "        self.snippet_text.delete(\"1.0\", tk.END)\n",
    "        \n",
    "    def export_notes_to_txt(self):\n",
    "        # This function handles exporting all notes to a TXT file.\n",
    "        if not self.notes:\n",
    "            messagebox.showerror(\"Error\", \"No notes to export!\")\n",
    "            return\n",
    "        notes_text = ''.join([note.format_as_text() for note in self.notes])\n",
    "        base_filename = simpledialog.askstring(\"File Path\", \"Enter the base filename to save:\")\n",
    "        if base_filename:\n",
    "            filename = f\"{base_filename}.txt\"  # I automatically append .txt to whatever filename the user inputs.\n",
    "            with open(filename, 'w') as file:\n",
    "                file.write(notes_text)\n",
    "            messagebox.showinfo(\"Success\", f\"Notes exported successfully to {filename}\")\n",
    "\n",
    "    def export_notes_to_json(self):\n",
    "        # This function handles exporting all notes to a JSON file.\n",
    "        if not self.notes:\n",
    "            messagebox.showerror(\"Error\", \"No notes to export!\")\n",
    "            return\n",
    "        notes_data = [note.__dict__ for note in self.notes]  # Convert each Note object's data to a dictionary\n",
    "        base_filename = simpledialog.askstring(\"File Path\", \"Enter the base filename to save:\")\n",
    "        if base_filename:\n",
    "            filename = f\"{base_filename}.json\"  # Automatically append .json to whatever filename the user inputs.\n",
    "            with open(filename, 'w') as file:\n",
    "                json.dump(notes_data, file, indent=4)  # Write JSON data to file\n",
    "            messagebox.showinfo(\"Success\", f\"Notes exported successfully to {filename}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    app = NoteApp()\n",
    "    app.mainloop()  # This starts the GUI application."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e1d0e8db",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
